#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+TITLE: Языки программирования
 
* Описание
  Курс рассказывает о языках программирования в контексте построения вычислительных систем.

  Курс состоит из:
  
  - 8 лекций
  - двух лабораторных работ по ассемблеру
  - трёх лабораторных работ по C
  - онлайн-курса по C
  - 8 практических занятий (сдвоенных, т.е. 8 встреч по две пары).


* Контакты
  
  [[[https://t.me/itmo_low_level_programming][Чат в Telegram]]] (организационные вопросы, обсуждения заданий).


* Задания и оценивание

  [[https://docs.google.com/spreadsheets/d/1C8WEkFrJMFLWsiVeEDzulRgiViippIq2O3FUKndeUYg/edit?usp=drivesdk][Журнал]]

  |                                   |   баллов    | кол-во |               | дедлайн       |
  |-----------------------------------+-------------+--------+---------------|---------------|
  | онлайн-курс                       |          18 |        |               | 31.12.2022    |
  | семинары                          |           4 |    x 8 |               |               |
  | [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/assignment-1-io-library][Задание 1: основы ассемблера]]      |           7 |        |               |  02.10.2022    |
  | [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/assignment-2-dictionary][Задание 2: ассемблер, словарь]]     |           5 |        |               |  16.10.2022     |
  | [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/assignment-3-image-rotation][Задание 3: C, поворот изображения]] |           7 |        |               | 15.11.2022     |
  | [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/assignment-4-memory-allocator][Задание 4: C, аллокатор]]           |           6 |        |               | 09.12.2022         |
  | [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/assignment-5-sepia-filter][Задание 5: C, сепия фильтр]]        |           5 |        | необязательно; 2 балла если не добились ускорения |  31.12.2022   |
  | провести code review коллегам     |           1 |   x 10 | минимум одно  |               |
  | экзамен                           |          20 |        | необязательно |               |
  | проект                            |          30 |        | необязательно |               |


  -  Суммарное максимальное количество баллов 140; баллы напрямую переводятся в баллы в БАРС, больше 100 баллов не ставится.
  -  Оценки ставятся в соответствии с БАРС, т.е. 91 балл и выше это A.
  -  Все обязательные задания необходимо выполнить чтобы получить аттестацию.

** Приступая к курсу

- Зарегистрируйтесь на [[gitlab.se.ifmo.ru]] с помощью корпоративной почты на =@itmo.ru= или =@niuitmo.ru=
- Зарегистрируйтесь на [[stepik.org]] и вступите в класс для курса [[https://stepik.org/join-class/36e3bc1562ca8695bdacd435e79816cb6d7c18d5]]
- Заполните форму [[https://forms.gle/XfZ6YSEY2NiDBnNu8]]
- Вступите в группу в Telegram: [[https://t.me/itmo_low_level_programming]]
- Установите WSL на вашу машину с Windows, или установите виртуальную машину с Linux, или установите необходимые программы на ваш компьютер с Linux. Для MacOS будут проблемы с ассемблером, но мы можем дать вам доступ по SSH к серверу с Linux.
  Необходимые программы:
  - gcc или clang
  - binutils
  - gdb
  - git
  - nasm
  - python (для тестов к первой лабе)
  - для тестирования лаб по C: clang-tidy
  - emacs, vim, или иной редактор кода. Для C хорошо работает связка с language server'ом от clang и редактором, или IDE с ним же.

** Онлайн-курс
   - Чтобы ваша информация не потерялась, *обязательно заполните форму* [[https://forms.gle/XfZ6YSEY2NiDBnNu8]]
   - Необходимо получить 152 баллов на Stepik чтобы зачесть курс (это 92% от всего курса на Stepik).
   - Курс или засчитывается полностью, или не засчитывается вообще.

** Семинары
   - Посещение обязательное.
   - На семинарах мы не сдаём лабы, а выполняем небольшие практические задания с инструкциями, с помощью преподавателей практики. Сдать задания нужно до конца занятия.
   - Иначе баллы за занятие вы не получите, никак.

     Выполнив все практические задания и онлайн-курс успешно вы уже получаете 58 баллов.


** Задания
   - Каждому заданию соответствует репозиторий. Делайте его форк, выполняйте в нём задание, затем посылайте merge request в родительский репозиторий [[[https://gitlab.se.ifmo.ru/cse/main/-/wikis/%D0%9A%D0%B0%D0%BA-%D0%BF%D0%BE%D1%81%D0%BB%D0%B0%D1%82%D1%8C-%D0%B7%D0%B0%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BD%D0%B0-%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D1%83][инструкция]]].
   - Задание должно пройти все тесты на Gitlab.
   - В профиле заполните полное именя (Profile->Full name) так, чтобы Вас можно было однозначно идентифицировать.
   - В названии merge request-а следует укать номер фашей группы и ФИО.
   - Задание выполнено когда оно прошло код-ревью преподавателя.
   - Если вы в числе первых сдающих, то сдаёте сразу преподавателю; иначе вы сначала проходите код-ревью у вашего коллеги, который уже сдал задание, а затем у преподавателя.
   - Ваш преподаватель практики решает для каждого конкретного задания, когда он перестаёт принимать студентов напрямую.
     
** Code review
   - Вы не обязаны проводить code review коллегам, но это лёгкий способ получить баллы.
   - Успешное ревью это 1 балл.
   - Вы получаете баллы за code-review в двух случаях:
     - Вы правильно указали на основные недостатки работы, и после вашего ревью код стал лучше.
     - Если код уже хороший, исправлять ничего не надо и вы получите максимальный балл.
   - В случае разночтений можно обращаться к преподавателю практики как к арбитру. 
     
** Экзамен
   - Письменная и устная часть. Беседа по материалу курса.

** Проект
   - Персональный проект --- отличный способ получить 30 баллов, занимаясь тем, что нравится (что почти гарантирует пятёрку за курс).

   - Проект станет частью вашего портфолио, которое вы сможете показать работодателю.

   - Согласуйте проект с лектором. 
     
   - Проект может быть почти любым, но со следующими ограничениями:
     - необходима интересная архитектурная задача или новая для вас технология. Например: Компиляторы и интерпретаторы языков программирования, языковые виртуальные машины, статический анализ кода, машинное обучение, компьютерная графика, драйверы и операционные системы (причем для второго  не обязательны низкоуровневые языки и вообще "писать под железо"), файловые системы, разработка СУБД, разработка железок, компьютерные игры, компьютерное зрение, синтез звука, криптография, умный дом
     - бан на C++, PHP, go, Python и проекты концентрирующиеся на веб-технологиях. 
        Вы в университете, и у вас есть уникальная возможность развивать эрудицию и кругозор. IT это гораздо больше, чем Web, а Web это не только не самая высокооплачиваемая, но и достаточно скучная область. По окончании университета велик шанс погрязть в ипотеках и так и не выбраться из загончика из знакомых трёх технологий и десяти фреймворков на JS. Словом, будете только этим заниматься в универе — велик шанс навечно остаться в ловушке средних доходов :) У вас также есть шанс попробовать не только неизвестные вам области, но и мало известные вам технологии. Они вас обогатят и дадут иной взгляд на  программирование, после чего вы даже на Java будете писать код лучше, чем до этого.
  - Внимательно отнеситесь к истории коммитов в Git 
  - Результат проекта -- репозиторий с кодом + видеодемонстрация работы.

 
- [[https://www.youtube.com/channel/UCOLTncnm6jVkO0pcPoIoHFg/videos][Проекты прошлых лет]]

 

* Лекции

- 02-09-2022 [[https://youtu.be/0vk2k6xGlvo][Системы, вычислительные системы]]
- 16-09-2022 [[https://youtu.be/RBLwGkvPTkk][Сложность систем]] 
- 14-10-2022 [[https://youtu.be/2yysqa6Dxss][Типы функциональных компонентов в компьютерных системах]]
- 28-10-2022 [[https://youtu.be/oeBT8d0bN_U][Функциональный компонент: исполнитель/интерпретатор. Стили программирования, модели вычислений]]


* Семинары

** [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/main/-/tree/master/seminar-1][Семинар 1. Cреда выполнения, основы языка ассемблера]]
  - Использование интерактивной оболочки
   - Переменные окружения
   - Регулярные выражения, =grep=
   - ~stdin~, ~stdout~, ~stderr~
  - Компиляция ассемблерных программ
   - Флаги компиляции
  - Разбор =Hello, world!=
   - Системные вызовы
   - Секции
   - Регистры общего назначения
   - Служебные регистры =rip=, =rsp=
  - Отладка
   - Настройка =gdb= для синтаксиса Intel. Файл =.gdbrc=
   - Изучение памяти в отладчике
   - Шаги вперёд и назад в отладчике

** [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/main/-/tree/master/seminar-2][Семинар 2. Вызов фунцкий, использование стека, конечные автоматы]]
  - Вызов функций
   - Аргументы функций
   - Возвращяемые значения
   - Соглашения о вызовах
  - Использование стека
   - Работа со стеком
   - Выделение памяти в стеке
   - Передача аргументов функций через стек
  - Конечные автоматы
   - Основные понятия
   - Связь с регулярными выражениями
   - Кодирование конечных автоматов

** [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/main/-/tree/master/seminar-3][Семинар 3. Цикл компиляции, препроцессор, утилита make]]
  - Цикл компиляции
   - Препроцессинг, трансляция, компоновка 
   - Таблицы символов и таблицы релокаций
   - Описание интерфейсов и заголовочные файлы
  - Препроцессор
   - Команды препроцессора
   - Однострочные и многострочные макросы
  - Утилита make
   - Makefile
   - Цели, зависимости, правила
   - Шаблоны и автоматические переменные

** [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/main/-/tree/master/seminar-4][Семинар 4. Виртуальная память, загрузка программ]]
  - Виртуальная память
   - Карты памяти процесса
   - Отображение файла в память
   - ELF-файлы
  - Загрузка программ
   - Вызов ассемблерного кода из C
   - Динамические библиотеки

** [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/main/-/tree/master/seminar-5][Семинар 5. Аспекты языка C, препроцессор языка C, _Generic]]
  - Аспекты языка
   - Синтаксис
   - Семантика
   - Прагматика
  - Препроцессор языка C
   - Макросы
   - Условные макросы
   - Макросы для работы со строками
  - Generic
  

#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+TITLE: Языки программирования
 
* Описание
  Курс рассказывает о языках программирования в контексте построения вычислительных систем.

  Курс состоит из:
  
  - 8 лекций
  - двух лабораторных работ по ассемблеру
  - трёх лабораторных работ по C
  - онлайн-курса по C
  - 8 практических занятий (сдвоенных, т.е. 8 встреч).


* Контакты
  
  [[[https://t.me/itmo_low_level_programming][Чат в Telegram]]] (организационные вопросы, обсуждения заданий).


* Задания и оценивание

  |                                   | макс.баллов | кол-во |               |
  |-----------------------------------+-------------+--------+---------------|
  | онлайн-курс                       |          18 |        |               |
  | семинары                          |           5 |      8 |               |
  | Задание 1: основы ассемблера      |           5 |        |               |
  | Задание 2: ассемблер, словарь     |           3 |        |               |
  | Задание 3: C, поворот изображения |           5 |        |               |
  | Задание 4: C, аллокатор           |           4 |        |               |
  | Задание 5: C, сепия фильтр        |           5 |        | необязательно |
  | провести code review коллегам     |           2 |      5 | необязательно |
  | экзамен                           |          20 |        | необязательно |
  | проект                            |          30 |        | необязательно |


  -  Суммарное максимальное количество баллов 140.
  -  Оценки ставятся в соответствии с БАРС, т.е. 91 балл и выше это A.
  -  Все обязательные задания необходимо выполнить.


** Онлайн-курс
   
   Необходимо получить 152 баллов на Stepik чтобы зачесть курс (это 92% от всего курса на Stepik).
   Курс или засчитывается полностью, или не засчитывается вообще.

** Семинары
   - Посещение обязательное.
   - На семинарах мы не сдаём лабы, а выполняем небольшие практические задания с инструкциями, с помощью преподавателей практики. Сдать задания нужно до конца занятия.
   - Иначе баллы за занятие вы не получите, никак.

     Выполнив все практические задания и онлайн-курс успешно вы уже получаете 58 баллов.


** Задания
   - Каждому заданию соответствует репозиторий. Делайте его форк, выполняйте в нём задание, затем посылайте merge request в родительский репозиторий [[[https://gitlab.se.ifmo.ru/cse/main/-/wikis/%D0%9A%D0%B0%D0%BA-%D0%BF%D0%BE%D1%81%D0%BB%D0%B0%D1%82%D1%8C-%D0%B7%D0%B0%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BD%D0%B0-%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D1%83][инструкция]]].
   - Задание должно пройти все тесты на Gitlab.
   - Задание выполнено когда оно прошло код-ревью преподавателя
   - Если вы в числе первых сдающих, то сдаёте сразу преподавателю; иначе вы сначала проходите код-ревью у вашего коллеги, который уже сдал задание, а затем у преподавателя.
   - Ваш преподаватель практики решает для каждого конкретного задания, когда он перестаёт принимать студентов напрямую.
     
** Code review
   - Вы не обязаны проводить code review коллегам, но это лёгкий способ получить баллы.
   - Успешное ревью это 2 балла, 
   - Вы получаете баллы за code-review в двух случаях:
     - Вы правильно указали на основные недостатки работы, и после вашего ревью код стал лучше.
     - Если код уже хороший, исправлять ничего не надо и вы получите максимальный балл.
   - В случае разночтений можно обращаться к преподавателю практики как к арбитру. 
     
** Экзамен
   - Письменная и устная часть. Беседа по материалу курса.

** Проект
   Персональный проект --- отличный способ получить 30 баллов, занимаясь тем, что нравится (что почти гарантирует пятёрку за курс).

   Проект станет частью вашего портфолио, которое вы сможете показать работодателю.

     
* Лекции

* Семинары

** [[https://gitlab.se.ifmo.ru/programming-languages/cse-programming-languages-fall-2022/main/-/tree/master/seminar-1][Семинар 1. Cреда выполнения, основы языка ассемблера]]
  - Использование интерактивной оболочки
   - Переменные окружения
   - Регулярные выражения, =grep=
   - ~stdin~, ~stdout~, ~stderr~
  - Компиляция ассемблерных программ
   - Флаги компиляции
  - Разбор =Hello, world!=
   - Системные вызовы
   - Секции
   - Регистры общего назначения
   - Служебные регистры =rip=, =rsp=
  - Отладка
   - Настройка =gdb= для синтаксиса Intel. Файл =.gdbrc=
   - Изучение памяти в отладчике
   - Шаги вперёд и назад в отладчике
